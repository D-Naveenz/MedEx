@use "../abstracts/variables" as *;
@use "../abstracts/breakpoints" as *;


$grid-columns: 12 !default;
$grid-rows: 9 !default;
$grid-gutter-width: 1.5rem !default;
$grid-gutter-height: 1.5rem !default;

@mixin make-css-grid($columns: $grid-columns, $rows: $grid-rows, $breakpoints: $grid-breakpoints) {
  @if ($rows) {
    @for $i from 1 through $rows {
      @for $j from 1 through ($rows - $i + 1) {
        .g-row-#{$i}#{if($j > 1, -span-#{$j}, "")} {
          grid-row: $i / span $j;
        }
      }
    }
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: get-breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if ($columns > 0) {
        @for $i from 1 through $columns {
          @for $j from 1 through ($columns - $i + 1) {
            .g-col#{$infix}-#{$i}#{if($j > 1, -span-#{$j}, "")} {
              grid-column: $i / span $j;
            }
          }
        }
      }
    }
  }
}

@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: get-breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .col#{$infix} {
        flex: 1 0 0;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
      }

      @if ($columns > 0) {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            flex: 0 0 calc(100% / #{$columns} * #{$i});
          }
        }
      }
    }
  }
}


/* Flex system */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 calc(var(--#{$prefix}gap) * -.5);

  > * {
    flex: 1 0 0;
    width: 100%;
    max-width: 100%;
    padding: 0 calc(var(--#{$prefix}gap) * .5);
  }

  // generating the row columns
  @include make-grid-columns();
}

/* Grid system */
.grid {
  display: grid;
  grid-template-rows: repeat(#{$grid-rows}, 1fr);
  grid-template-columns: repeat(#{$grid-columns}, 1fr);
  grid-gap: var(--#{$prefix}gap, #{$grid-gutter-width}) var(--#{$prefix}gap, #{$grid-gutter-height});

  // generating the css grid
  @include make-css-grid();
}